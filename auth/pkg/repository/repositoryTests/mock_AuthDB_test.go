// Code generated by mockery v2.22.1. DO NOT EDIT.

package repositoryTests

import (
	entities "auth/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthDB is an autogenerated mock type for the AuthDB type
type MockAuthDB struct {
	mock.Mock
}

type MockAuthDB_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthDB) EXPECT() *MockAuthDB_Expecter {
	return &MockAuthDB_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: u
func (_m *MockAuthDB) CreateUser(u entities.User) (string, error) {
	ret := _m.Called(u)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.User) (string, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(entities.User) string); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthDB_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockAuthDB_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - u entities.User
func (_e *MockAuthDB_Expecter) CreateUser(u interface{}) *MockAuthDB_CreateUser_Call {
	return &MockAuthDB_CreateUser_Call{Call: _e.mock.On("CreateUser", u)}
}

func (_c *MockAuthDB_CreateUser_Call) Run(run func(u entities.User)) *MockAuthDB_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.User))
	})
	return _c
}

func (_c *MockAuthDB_CreateUser_Call) Return(_a0 string, _a1 error) *MockAuthDB_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthDB_CreateUser_Call) RunAndReturn(run func(entities.User) (string, error)) *MockAuthDB_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function with given fields: u
func (_m *MockAuthDB) LoginUser(u entities.UserInput) ([3]string, error) {
	ret := _m.Called(u)

	var r0 [3]string
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.UserInput) ([3]string, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(entities.UserInput) [3]string); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([3]string)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.UserInput) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthDB_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type MockAuthDB_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - u entities.UserInput
func (_e *MockAuthDB_Expecter) LoginUser(u interface{}) *MockAuthDB_LoginUser_Call {
	return &MockAuthDB_LoginUser_Call{Call: _e.mock.On("LoginUser", u)}
}

func (_c *MockAuthDB_LoginUser_Call) Run(run func(u entities.UserInput)) *MockAuthDB_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.UserInput))
	})
	return _c
}

func (_c *MockAuthDB_LoginUser_Call) Return(_a0 [3]string, _a1 error) *MockAuthDB_LoginUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthDB_LoginUser_Call) RunAndReturn(run func(entities.UserInput) ([3]string, error)) *MockAuthDB_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// RecoverPassword provides a mock function with given fields: u
func (_m *MockAuthDB) RecoverPassword(u entities.RecoverPasswordInput) error {
	ret := _m.Called(u)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.RecoverPasswordInput) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthDB_RecoverPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecoverPassword'
type MockAuthDB_RecoverPassword_Call struct {
	*mock.Call
}

// RecoverPassword is a helper method to define mock.On call
//   - u entities.RecoverPasswordInput
func (_e *MockAuthDB_Expecter) RecoverPassword(u interface{}) *MockAuthDB_RecoverPassword_Call {
	return &MockAuthDB_RecoverPassword_Call{Call: _e.mock.On("RecoverPassword", u)}
}

func (_c *MockAuthDB_RecoverPassword_Call) Run(run func(u entities.RecoverPasswordInput)) *MockAuthDB_RecoverPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.RecoverPasswordInput))
	})
	return _c
}

func (_c *MockAuthDB_RecoverPassword_Call) Return(_a0 error) *MockAuthDB_RecoverPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthDB_RecoverPassword_Call) RunAndReturn(run func(entities.RecoverPasswordInput) error) *MockAuthDB_RecoverPassword_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAuthDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAuthDB creates a new instance of MockAuthDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAuthDB(t mockConstructorTestingTNewMockAuthDB) *MockAuthDB {
	mock := &MockAuthDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
